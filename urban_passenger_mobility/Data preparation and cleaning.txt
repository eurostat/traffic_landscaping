Crop OSM map:

# load shapefile
FUA_shape_file <- read_sf(path_to_shape_file, layer= name_layer) 

# select FUA
city_shape_file <- FUA_shape_file %>%
  filter(URAU_CODE  == urban_area_of_interest)

# reproject city shapefile to longlat
city_shape_file <- st_transform(city_shape_file, st_crs("+proj=longlat"))

# extract bounding box of shapefile
bbox_FUA <- round(st_bbox(city_shape_file) *100)/ 100

# create osmconvert string command
cutting_command <-
  glue(
    "osmconvert64-0.8.8p.exe {name_country_osm_file} -b={bbox_FUA$xmin -0.02},{bbox_FUA$ymin -0.02},{bbox_FUA$xmax +0.02},{bbox_FUA$ymax +0.02}  --complete-ways --out-pbf -o={file.path(cleaned_data_folder,name_FUA_osm_file)}"
  )

# run osmconvert string command  command tool to snap just the city of the hague shapefile
system(cutting_command)



Crop and Clean GTFS data:

# Load GTFS file
full_gtfs_file <- gtfs2gps::read_gtfs(path_to_gtfs_file)

# Filter only the stops that are in the actual FUA
current_UA_stops <- full_gtfs_file$stops%>%
  st_as_sf(coords = c("stop_lon", "stop_lat")) %>%
  st_set_crs(st_crs("+proj=longlat"))%>%
  mutate(point_in = as.numeric(st_intersects(., city_shape_file))) %>%
  filter(!is.na(point_in)) %>%
  dplyr::mutate(lon = sf::st_coordinates(.)[,1],
                lat = sf::st_coordinates(.)[,2]) 

# Filter only the stop times of the stops that are within the FUA
current_UA_stoptimes <- full_gtfs_file$stop_times %>% 
  filter(stop_id  %in% unique(current_UA_stops$stop_id))

# Filter only trips that go by the stops that are within the FUA
current_UA_trips <- full_gtfs_file$trips%>% 
  filter(trip_id   %in% unique(current_UA_stoptimes$trip_id ))

# Filter only routes that go by the stops that are within the FUA
routes_of_interest <- full_gtfs_file$routes %>% 
  filter(route_id    %in% unique(current_UA_trips$route_id  )) %>% 
  pull(route_id ) %>% 
  unique()

# subset the whole GTFS file
subset_gtfs_file <- gtfs2gps::filter_by_route_id(full_gtfs_file, routes_of_interest)

# Filter only the stops that are in the actual FUA
# needs to happen again after the filtering of the routes
subset_UA_stops <- subset_gtfs_file$stops%>%
  st_as_sf(coords = c("stop_lon", "stop_lat")) %>%
  st_set_crs(st_crs("+proj=longlat"))%>%
  mutate(point_in = as.numeric(st_intersects(., city_shape_file))) %>%
  filter(!is.na(point_in)) %>%
  dplyr::mutate(lon = sf::st_coordinates(.)[,1],
                lat = sf::st_coordinates(.)[,2]) 

# Filter only the stop times of the stops that are within the FUA
subset_UA_stoptimes <- subset_gtfs_file$stop_times %>% 
  filter(stop_id  %in% unique(subset_UA_stops$stop_id))

# Filter out invalid stops
subset_gtfs_file <- gtfs2gps::remove_invalid(subset_gtfs_file)
subset_gtfs_file <- gtfs2gps::filter_valid_stop_times(subset_gtfs_file)

# save the subsetted GTFS file.
gtfs2gps::write_gtfs(subset_gtfs_file, file.path(cleaned_data_folder,path_to_subset_gtfs_file))



original GTFS routing data:

full_shape <- full_gtfs_file$shapes

ggplot(full_shape) +
  geom_sf(data = city_shape_file, fill = "red", alpha = .5) +
  geom_path(aes(shape_pt_lon, 
                shape_pt_lat,
                group = shape_id), color="white", size=.2, alpha=.05) +
  theme_void() +
  theme(plot.background = element_rect(fill = "black", colour = "black"),
        axis.title.x = element_blank())


filtered data:

subset_shape <- subset_gtfs_file$shapes

ggplot(subset_shape) +
  geom_sf(data = city_shape_file, fill = "red", alpha = .5) +
  geom_path(aes(shape_pt_lon,
                shape_pt_lat,
                group = shape_id), color="white", size=.2, alpha=.05) +
  theme_void() +
  theme(plot.background = element_rect(fill = "black", colour = "black"),
        axis.title.x = element_blank())



rroutes inside which lead outside (like trains)

ggplot(subset_shape) +
  geom_sf(data = city_shape_file, fill = "red", alpha = .5) +
  coord_sf(xlim = c(4.1, 4.6), ylim = c(51.9, 52.2))+
  geom_path(aes(shape_pt_lon, shape_pt_lat, group=shape_id), color="white", size=.5, alpha=.05) +
  geom_point(data = current_UA_stops, aes(lon, lat), color="white", fill = "white", size = 1, alpha=.2) +
  theme_void() +
  theme(plot.background = element_rect(fill = "black", colour = "black"),
        title = element_text(hjust=1, colour="white", size = 8),
        axis.title.x = element_blank())



Folder structure:

.
└── OTP_folder
    └── graphs
        └── default
            ├── elevation.tif
            ├── gtfs.zip
            └── osm_file.osm.pbf

code of Folder structure:

# set top level folder
path_data <- file.path(name_OTP_folder)

# create subfolders
ifelse(!dir.exists(path_data), dir.create(path_data), FALSE)
ifelse(!dir.exists( file.path(name_OTP_folder, "graphs")), 
       dir.create( file.path(name_OTP_folder, "graphs")), FALSE)


ifelse(!dir.exists( file.path(name_OTP_folder,  "graphs", "default")), 
       dir.create( file.path(name_OTP_folder,  "graphs",  "default")), FALSE)

# copy files into a subfolder and rename them
file.copy(file.path(cleaned_data_folder, name_FUA_osm_file),
          file.path(name_OTP_folder,
                    "graphs", "default"))

file.rename(from = file.path(name_OTP_folder,
                             "graphs", "default", name_FUA_osm_file),
            to   = file.path(name_OTP_folder, 
                             "graphs", "default", "osm_file.osm.pbf"))


file.copy(file.path(cleaned_data_folder, path_to_subset_gtfs_file),
          file.path(name_OTP_folder,
                    "graphs", "default"))

file.rename(from = file.path(name_OTP_folder, 
                             "graphs", "default", path_to_subset_gtfs_file),
            to   = file.path(name_OTP_folder, 
                             "graphs", "default", "gtfs.zip"))


file.copy(file.path(cleaned_data_folder, path_to_saved_elevation),
          file.path(name_OTP_folder,  "graphs", "default"))

file.rename(from = file.path(name_OTP_folder,  "graphs", "default", path_to_saved_elevation),
            to   = file.path(name_OTP_folder,  "graphs", "default", "elevation.tif"))


Start OTP:

otp_check_java()

path_otp <- otp_dl_jar(path_data, cache = TRUE)
log1 <- otp_build_graph(otp = path_otp, dir = path_data,  memory = 8000)
log2 <- otp_setup(otp = path_otp, dir = path_data)
otpcon <- otp_connect(timezone = "Europe/Amsterdam")


Connection Docker container to R:

options(openrouteservice.url = "http://localhost:8080/ors")
options(openrouteservice.paths = list(directions = "v2/directions",
                                      isochrones = "v2/isochrones",
                                      matrix = "v2/matrix",
                                      geocode = "geocode",
                                      pois = "pois",
                                      elevation = "elevation",
                                      optimization = "optimization"))